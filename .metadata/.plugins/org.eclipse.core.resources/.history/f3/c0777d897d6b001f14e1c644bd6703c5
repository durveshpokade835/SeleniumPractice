//package registerFunctionality;

import java.time.Duration;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.asserts.SoftAssert;

public class TrialAndError {

    private static WebDriver driver;
    private static JavascriptExecutor js;
    private static WebDriverWait wait;
    private static WebElement firstNameField;
    private static WebElement lastNameField;
    private static WebElement emailField;
    private static WebElement passField;
    private static WebElement subscribe;
    private static WebElement agreeCheckbox;
    private static WebElement submit;
    private static WebElement errorMessage;

    public static void main(String[] args) {
        // Test case description...
        /*
         * Test case ID- TC_REG_010 test case scenario - (TS_UI_004) Register
         * Functionality Verify password field meets minimum length and complexity
         * requirements.
         */

        System.setProperty("webdriver.chrome.driver", "D:\\Bits New Trainning Automation\\Drivers/chromedriver.exe");
        driver = new ChromeDriver();
        js = (JavascriptExecutor) driver;
        wait = new WebDriverWait(driver, Duration.ofSeconds(15));

        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

        // Accessing The locally hosted website
        driver.get("http://localhost/opencart/upload/");
        // Go to Register Page
        WebElement myAccount = driver.findElement(By.xpath("(//span[@class='d-none d-md-inline'])[3]"));
        WebElement register = driver.findElement(By.xpath(
                "//a[@href='http://localhost/opencart/upload/index.php?route=account/register&language=en-gb']"));

        myAccount.click();
        register.click();

        String registrationUrl = "http://localhost/opencart/upload/index.php?route=account/register&language=en-gb";
        String accountCreationPage = "http://localhost/opencart/upload/index.php?route=account/success&language=en-gb&customer_token=fe80e7f4d73c8f9578decbf9b7";

        // Initialising Soft Assert
        SoftAssert softAssert = new SoftAssert();

        // List of Invalid Passwords
        List<String> invalidPass = List.of("123", "abc", "abc123", "Abc123");

        // List Of Valid Passwords
        List<String> validPass = List.of("Abc@123", "abx!33", "lmn123$$");

        // Initialize form elements
        reinitializeElements();

        // Test User Information
        String firstName = "abc";
        String lastName = "xyz";

        // Test Invalid Passwords
        for (int i = 0; i < invalidPass.size(); i++) {
            String password = invalidPass.get(i);
            String uniqueEmail = generateUniqueEmail(firstName, lastName);

            try {
                fillForm(firstName, lastName, uniqueEmail, password);
                submitForm();

                // Check error messages for invalid password
                if (driver.getCurrentUrl().contains(registrationUrl)) {
                    String actErrorMsg = errorMessage.getText();
                    System.out.println(actErrorMsg);
                    softAssert.assertTrue(actErrorMsg.contains("Password must be between 6 and 20 characters!"),
                            "Error message for invalid password '" + password + "' not displayed correctly");
                } else if (driver.getCurrentUrl().contains(accountCreationPage)) {
                    softAssert.assertTrue(driver.getCurrentUrl().contains(accountCreationPage),
                            "Test failed: User was not redirected to the login page for valid password '" + password + "'.");
                    driver.navigate().to(registrationUrl);
                    // Reinitialize elements after navigating back
                    reinitializeElements();
                }
            } catch (org.openqa.selenium.StaleElementReferenceException e) {
                // Handle stale element reference and reinitialize elements
                System.out.println("StaleElementReferenceException caught. Reinitializing elements...");
                reinitializeElements();
                i--; // Retry the current password after reinitializing elements
            } catch (org.openqa.selenium.NoSuchElementException e) {
                // Handle case where elements cannot be found
                System.out.println("NoSuchElementException caught. Retrying...");
                driver.navigate().refresh();
                reinitializeElements();
                i--; // Retry the current password after refreshing and reinitializing elements
            }
        }

        // Testing Valid Passwords
        for (int i = 0; i < validPass.size(); i++) {
            String password = validPass.get(i);
            String uniqueEmail = generateUniqueEmail(firstName, lastName);

            try {
                fillForm(firstName, lastName, uniqueEmail, password);
                submitForm();

                // Verify that the user is redirected to the login page
                softAssert.assertTrue(driver.getCurrentUrl().contains(accountCreationPage),
                        "Test failed: User was not redirected to the login page for valid password '" + password + "'.");

                // Navigate back to the registration page for the next test
                driver.navigate().to(registrationUrl);
                // Reinitialize elements after navigating back
                reinitializeElements();
            } catch (org.openqa.selenium.StaleElementReferenceException e) {
                // Handle stale element reference and reinitialize elements
                System.out.println("StaleElementReferenceException caught. Reinitializing elements...");
                reinitializeElements();
                i--; // Retry the current password after reinitializing elements
            } catch (org.openqa.selenium.NoSuchElementException e) {
                // Handle case where elements cannot be found
                System.out.println("NoSuchElementException caught. Retrying...");
                driver.navigate().refresh();
                reinitializeElements();
                i--; // Retry the current password after refreshing and reinitializing elements
            }
        }

        // Report all soft assertions
        softAssert.assertAll();

        // Close the driver
        driver.quit();
    }

    // Method to initialize form elements
    public static void reinitializeElements() {
        try {
            firstNameField = driver.findElement(By.id("input-firstname"));
            lastNameField = driver.findElement(By.id("input-lastname"));
            emailField = driver.findElement(By.id("input-email"));
            passField = driver.findElement(By.id("input-password"));
            subscribe = driver.findElement(By.id("input-newsletter"));
            agreeCheckbox = driver.findElement(By.cssSelector("input[name='agree']"));
            submit = driver.findElement(By.xpath("//button[@class='btn btn-primary']"));
            errorMessage = driver.findElement(By.id("error-email"));
        } catch (org.openqa.selenium.NoSuchElementException e) {
            System.out.println("Element not found during reinitialization: " + e.getMessage());
        }
    }

    // Method to fill out the form
    public static void fillForm(String firstName, String lastName, String email, String password) {
        firstNameField.clear();
        firstNameField.sendKeys(firstName);
        lastNameField.clear();
        lastNameField.sendKeys(lastName);
        emailField.clear();
        emailField.sendKeys(email);
        passField.clear();
        passField.sendKeys(password);
    }

    // Method to submit the form
    public static void submitForm() {
        js.executeScript("arguments[0].scrollIntoView(true);", subscribe);
        wait.until(ExpectedConditions.elementToBeClickable(subscribe));

        try {
            subscribe.click();
        } catch (org.openqa.selenium.ElementClickInterceptedException e) {
            js.executeScript("arguments[0].click();", subscribe);
        }

        js.executeScript("arguments[0].scrollIntoView();", agreeCheckbox);
        wait.until(ExpectedConditions.elementToBeClickable(agreeCheckbox));

        try {
            agreeCheckbox.click();
        } catch (org.openqa.selenium.ElementClickInterceptedException e) {
            js.executeScript("arguments[0].click();", agreeCheckbox);
        }

        js.executeScript("arguments[0].scrollIntoView(true)", submit);

        try {
            submit.click();
        } catch (org.openqa.selenium.ElementClickInterceptedException e) {
            js.executeScript("arguments[0].click();", submit);
        }
    }

    // Random emailId generator function
    public static String generateUniqueEmail(String firstName, String lastName) {
        String baseEmail = firstName + "." + lastName;
        String domain = "@gmail.com";
        int randomNumber = new Random().nextInt(10000);  // Generate a random number to ensure uniqueness
        return baseEmail + randomNumber + domain;
    }
}
